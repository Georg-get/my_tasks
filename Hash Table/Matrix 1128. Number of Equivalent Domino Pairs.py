### Условие задачи:
# Учитывая список dominoes, dominoes[i] = [a, b]эквивалентно тогда dominoes[j] = [c, d] и только тогда, когда либо ( a == cи b == d),
# либо ( a == dи b == c) - то есть одно домино можно повернуть, чтобы оно было равно другому.
# Возвращает количество пар, для(i, j) которых 0 <= i < j < dominoes.length, и dominoes[i]эквивалентно dominoes[j] .

# Example 1:
# Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
# Output: 1

# Example 2:
# Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
# Output: 3

### Краткое условие:
# Матрица, пройтись по матрице dominoes и найти колличество одинаковых пара и вывести число этих одинаковых пар.

# Алгоритм решение задачи:
# 0) Создаем пустой словарь dict и переменную result равную 0.
# 1) Проходимся циклом по матрице dominoes,
# 1.1) Создаем переменную k равную 0.
# 1.2) Если нулевой элемент из массива меньше первого элемента массива из матрицы dominoes,
# 1.2.1) То К равна нулевой элемент из массива умноженая на 10 + первый элемента массива из матрицы dominoes
# 1.3) Если нулевой элемент из массива НЕ меньше первого элемента массива из матрицы dominoes,
# 1.3.1) То К равна ПЕРВОМУ элемент из массива умноженая на 10 + НУЛЕВОМУ элемента массива из матрицы dominoes
# 1.4) Если ключ k есть в словаре dict, то увелич значние ключа k на 1.
# 1.5) Если ключ k НЕТу в словаре dict, то добавь ключа k со значением 1 в словарь dict.
# 2) Проходимся циклом по словарю dict,
# 2.1) Если значение ключа i больше 1, то увеличь переменную result на значение ключа i умноженое (значение ключа i -1) деленае на 2.
# 3) Верни переменную result.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

dominoes = [[1, 2], [2, 1], [3, 4], [5, 6]]

def numEquivDominoPairs(dominoes):
    dict = {}
    result = 0

    for i in dominoes:

        if i[0] < i[1]:
            k = i[0] * 10 + i[1]
        else:
            k = i[1] * 10 + i[0]

        if k in dict:
            dict[k] += 1
        else:
            dict[k] = 1
    # {12: 2, 34: 1, 56: 1}
    for i in dict:
        if dict[i] > 1:
            result += (dict[i] * (dict[i] - 1)) // 2

    return result # 1

numEquivDominoPairs(dominoes)