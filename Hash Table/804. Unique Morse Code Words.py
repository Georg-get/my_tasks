### Условие задачи:
# Международный код Морзе определяет стандартную кодировку, в которой каждая буква отображается в виде ряда точек и тире, а именно:
# 'a'карты в ".-",
# 'b'карты в "-...",
# 'c'карты в "-.-.", и так далее.
# Для удобства ниже приведена полная таблица букв 26английского алфавита:
# [".-","-...","-.-.","-..",".","..-.","--.","....", "..",".---","-.-",".-..","--","-.","---",".--.","- -.-",".-.","...","-","..-","...-",".--","-..-","-. --","--.."]
# Дан массив строк words, в котором каждое слово может быть записано как объединение каждой буквы азбукой Морзе.
# Например, "cab"можно записать как "-.-..--...", что является конкатенацией "-.-.", ".-"и "-...".
# Такое соединение мы будем называть преобразованием слова.
# Возвращает количество различных преобразований среди всех имеющихся у нас слов.

# Example 1:
# Input: words = ["gin","zen","gig","msg"]
# Output: 2
# Explanation: The trresultformation of each word is:
# "gin" -> "--...-."
# "zen" -> "--...-."
# "gig" -> "--...--."
# "msg" -> "--...--."
# There are 2 different trresultformations: "--...-." and "--...--.".

# Example 2:
# Input: words = ["a"]
# Output: 1

### Краткое условие:
# Закодировать слова из массива words в азбуку Морзе и посчитать количество уникальных закодированых слов.

# Алгоритм решение задачи:
# 0) Создаем словарь codeMorse в котором будет храниться Азбука Морза и переменную result в котором будет храниться set.
# 1) Проходимся по массиву words и создаем пустой массив arrayEncodedLetters.
# 1.1) Проходимся по каждой букве в слове из массива words,
# 1.1.1) Кодируем слово из массива words при помощи словаря codeMorse в Азбука Морза и добавляем результат в массив arrayEncodedLetters.
# 1.2) Добавляем значение из массива arrayEncodedLetters в словарь result (у нас там set, он не пропустит дубликаты значений).
# 2) Вернуть размер словаря.

# Сложность:
# 1) Время O(n) (N * L)
# 2) Память O(n) (N * L)

words = ["gin", "zen", "gig", "msg"]

def uniqueMorseRepresentations(words):
    codeMorse = {'a': ".-", 'b': "-...", 'c': "-.-.",
                 'd': "-..", 'e': ".", 'f': "..-.",
                 'g': "--.", 'h': "....", 'i': "..",
                 'j': ".---", 'k': "-.-", 'l': ".-..",
                 'm': "--", 'n': "-.", 'o': "---",
                 'p': ".--.", 'q': "--.-", 'r': ".-.",
                 's': "...", 't': "-", 'u': "..-",
                 'v': "...-", 'w': ".--",
                 'x': "-..-", 'y': "-.--", 'z': "--.."
                 }

    result = set()

    for i in words:
        arrayEncodedLetters = []
        for j in i:
            arrayEncodedLetters.append(codeMorse[j])
        result.add(''.join(arrayEncodedLetters))
    # {'--...-.', '--...--.'} 2
    return len(result)

uniqueMorseRepresentations(words)

assert uniqueMorseRepresentations(words=["gin", "zen", "gig", "msg"]) == 2
assert uniqueMorseRepresentations(words=["a"]) == 1