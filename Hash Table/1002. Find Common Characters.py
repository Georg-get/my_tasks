### Условие задачи:
# Учитывая массив строк words, верните массив всех символов,
# которые встречаются во всех строках внутри words(включая дубликаты). Вы можете вернуть ответ в любом порядке.

# Example 1:
# Input: words = ["bella","label","roller"]
# Output: ["e","l","l"]

# Example 2:
# Input: words = ["cool","lock","cook"]
# Output: ["c","o"]

### Краткое условие:
# Надо вернуть массив из букв (включая дубликаты), которые больше всего повторяются в словах из массива words.

# Алгоритм решение задачи:
# 0) Создаем пустой словарь dict и пустой массив result.
# 1) Проходимся циклом по нулевому элементу массиву words (слову),
# 1.1) Если ключ i есть в словаре dict, то увеличь значение этого ключа на 1.
# 1.2) Если ключ i НЕТу в словаре dict, то добавь ключ i со значением 1 в словарь dict.
# 2) Проходимся циклом по диапазону (от 1 до длины массива words) (1 3),
# 2.1) Проходимся циклом по ключам словаря dict,
# 2.1.1) Если k есть в элементе j массива words и значение ключа k в словаре больше 0,
# 2.1.1.1) То увеличь переменную counts на количество повторяемых букв в слове из массива words.
# 2.1.1.2) Если переменная counts меньше значение ключа k из словаря, то присвой ключу k значение переменой counts.
# 2.1.2) Если k НЕТу в элементе j массива words и значение ключа k в словаре больше 0, то уменьши значение ключа на 1.
# 3) Проходимся циклом по ключам и их значению словаря dict,
# 3.1) Если значение больше 0, то добавляем в массив result значение key умноженое на v (велью).
# 4) Вернуть массив result.

# Сложность:
# 1) Время O(n)
# 2) Память O(k)

words = ["bella", "label", "roller"]

def commonChars(words):
    dict = {}
    result = []

    for i in words[0]:
        if i in dict:
            dict[i] += 1
        else:
            dict[i] = 1
    # {'b': 1, 'e': 1, 'l': 2, 'a': 1}
    for j in range(1, len(words)):
        for k in dict.keys():  # ['b', 'e', 'l', 'a']
            if k in words[j] and dict[k] > 0:
                # print(count(k))
                counts = words[j].count(k)
                if counts < dict[k]:
                    dict[k] = counts
            else:
                dict[k] = -1
    # {'b': -1, 'e': 1, 'l': 2, 'a': -1}
    for key, v in dict.items():  # l,2
        if v > 0:
            result.extend([key] * v)  # l * 2 = [l,l]
    # ['e', 'l', 'l']
    return result

commonChars(words)

assert commonChars(words=["bella", "label", "roller"]) == ["e", "l", "l"]
assert commonChars(words=["cool", "lock", "cook"]) == ["c", "o"]