### Условие задачи:
# Мы определяем гармоничный массив как массив, в котором разница между его максимальным и минимальным значением составляет ровно 1 .
# Учитывая целочисленный массив nums, верните длину его самой длинной гармоничной подпоследовательности среди всех возможных подпоследовательностей .
# Подпоследовательность массива — это последовательность, которую можно получить из массива путем удаления некоторых элементов
# или отсутствия их без изменения порядка остальных элементов.

# Example 1:
# Input: nums = [1,3,2,2,5,2,3,7]
# Output: 5
# Explanation: The longest harmonious subsequence is [3,2,2,2,3].

# Example 2:
# Input: nums = [1,2,3,4]
# Output: 2

# Example 3:
# Input: nums = [1,1,1,1]
# Output: 0

### Краткое условие:
# Учитывая целочисленный массив nums,
# верните длину его самой длинной гармоничной подпоследовательности среди всех возможных подпоследовательностей .
# В массиве nums надо избавиться от чисел которые не дубликаты и вернуть длину последовательности.

# Алгоритм решение задачи:
# 0) Создаем пустой словарь dict и переменную result со занчением 0.
# 1) Проходимся циклом по массиву nums,
# 1.1) Если ключ i есть в словаре dict, то увеличь значение ключа i на 1.
# 1.2) Если ключа i НЕТу в словаре dict, то добавь ключ i со занчениме 1 в словарь dict.
# 2) Проходимся циклом по словарю dict,
# 2.1) Если ключ j+1 есть в словаре dict,
# 2.1.1) То увеличь значение переменой result на максимальное значение (result, dict[j] + dict[j + 1]).
# 3) Вернуть переменную result.

# Сложность:
# 1) Время O(n)
# 2) Память O(n) (k)

nums = [1, 3, 2, 2, 5, 2, 3, 7]

def findLHS(nums):
    dict = {}
    result = 0

    for i in nums:
        if i in dict:
            dict[i] += 1
        else:
            dict[i] = 1
    # {1: 1, 2: 3, 3: 2, 5: 1, 7: 1}
    for j in dict:
        if j + 1 in dict.keys():
            #               0,      1   + (3))
            #               4,      3   + (2))
            result = max(result, dict[j] + dict[j + 1])
    # 5
    return result

findLHS(nums)

assert findLHS(nums=[1, 3, 2, 2, 5, 2, 3, 7]) == 5
assert findLHS(nums=[1, 2, 3, 4]) == 2
assert findLHS(nums=[1, 1, 1, 1]) == 0