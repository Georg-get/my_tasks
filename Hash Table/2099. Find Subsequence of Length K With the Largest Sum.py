### Условие задачи:
# Вам дан целочисленный массив nums и целое число k. Вы хотите найти подпоследовательность длины nums, k имеющую наибольшую сумму.
# Возвратите любую такую подпоследовательность как целочисленный массив длины . k
# Подпоследовательность — это массив, который можно получить из другого массива путем удаления некоторых элементов или
# их отсутствия без изменения порядка остальных элементов.

# Example 1:
# Input: nums = [2,1,3,3], k = 2
# Output: [3,3]
# Explanation:
# The subsequence has the largest sum of 3 + 3 = 6.

# Example 2:
# Input: nums = [-1,-2,3,4], k = 3
# Output: [-1,3,4]
# Explanation:
# The subsequence has the largest sum of -1 + 3 + 4 = 6.

# Example 3:
# Input: nums = [3,4,3,3], k = 2
# Output: [3,4]
# Explanation:
# The subsequence has the largest sum of 3 + 4 = 7.
# Another possible subsequence is [4, 3].

### Краткое условие:
# Вернуть любую такую подпоследовательность в виде массива целых чисел длины k.

                                            ### Решение без хэша таблицы !!! ###

                                            ### Добавить в список !
# Краткое объяснение решение задачи:
# Удаляем наименьшие элементы из списка nums, пока не останется ровно k элементов в массиве nums.

# Полное объяснение решение задачи:
# 0) Проходимся циклом ваилд пока длина массива nums не станет равна переменной k.
# 0.1) Убираем самые маленькие числа в массиве nums.
# 1) Вернуть массив nums.

# Сложность:
# 1) Время O(n^2)
# 2) Память O(1)

### Сложная задача !!!

nums = [2, 1, 3, 3]
k = 2

def maxSubsequence(nums, k):
    while len(nums) > k:
        nums.remove(min(nums))
        # [3, 3]
    return nums

maxSubsequence(nums, k)

assert maxSubsequence(nums=[2, 1, 3, 3], k=2) == [3, 3]
assert maxSubsequence(nums=[-1, -2, 3, 4], k=3) == [-1, 3, 4]
assert maxSubsequence(nums=[3, 4, 3, 3], k=2) == [4, 3]  # тут проблема с тестовыми даннами !!!
# Доп юнитесты для проверки некоторых условий:
assert maxSubsequence(nums=[-1, -2, -3, -4, -5], k=2) == [-1, -2]  # Тест с отрицательными числам
assert maxSubsequence(nums=[0, 0, 0, 0], k=2) == [0, 0]  # Тест с нулями
assert maxSubsequence(nums=[2, 2, 2, 2], k=3) == [2, 2, 2]  # Тест с одинаковыми числами
assert maxSubsequence(nums=[10], k=1) == [10]  # Тест с одним элементом
assert maxSubsequence(nums=[1, 3, 5, 7, 9, 11], k=4) == [5, 7, 9, 11]  # Тест с большим массивом
assert maxSubsequence(nums=[4, 1, 3], k=3) == [4, 1, 3]  # Тест с K равным длине массива

### Старая рабочая версия !!! ###

# Полное объяснение решение задачи:
# 0) Проходимся циклом по диапазону от 0 до длины массива nums - k.
# 0.1) Убираем самые маленькие числа в массиве nums.
# 1) Вернуть массив nums.

# Сложность:
# 1) Время O(n^2)
# 2) Память O(1)
#
# nums = [2, 1, 3, 3]
# k = 2
#
# def maxSubsequence(nums, k):
#    for i in range(len(nums) - k):  # 4 - 2 = 2
#        nums.remove(min(nums))
#    # [3, 3]
#    return nums
# maxSubsequence(nums, k)