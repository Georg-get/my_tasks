### Условие задачи:
# Учитывая две строки sи t, верните, true если t является анаграммой s, и false в противном случае.
# Анаграмма — это слово или фраза, образованная перестановкой букв другого слова или фразы,
# обычно с использованием всех исходных букв ровно один раз.

# Example 1:
# Input: s = "anagram", t = "nagaram"
# Output: true

# Example 2:
# Input: s = "rat", t = "car"
# Output: false


### Краткое условие:
# Надо сравнить две строки: s и j верните, true если t является анаграммой s, и false в противном случае.

# Алгоритм решение задачи:
# 0) Создаем два пустых словаря dict1 и dict2.
# 1) Проходимся циклом по стороке s,
# 1.1) Если ключ i есть в словаре dict1, то увеличь значние ключа i на 1.
# 1.2) Если ключ i НЕТу в словаре dict1, то добавь ключь i со значением 1 в словарь dict1.
# 2) Проходимся циклом по стороке t,
# 2.1) Если ключ j есть в словаре dict2, то увеличь значние ключа j на 1.
# 2.2) Если ключ j НЕТу в словаре dict2, то добавь ключь j со значением 1 в словарь dict2.
# 3) Вернуть сравнение на равенство двух словарей dict1 и dict2.

# Сложность:
# 1) Время O(n)
# 2) Память O(n) (k)

s = "anagram"
t = "nagaram"

def isAnagram(s, t):
    dict1 = {}
    dict2 = {}

    for i in s:
        if i in dict1:
            dict1[i] += 1
        else:
            dict1[i] = 1
    # {'a': 3, 'n': 1, 'g': 1, 'r': 1, 'm': 1}
    for j in t:
        if j in dict2:
            dict2[j] += 1
        else:
            dict2[j] = 1
    # {'n': 1, 'a': 3, 'g': 1, 'r': 1, 'm': 1}
    if dict1 == dict2:
        return True
    else:
        return False

isAnagram(s, t)

assert isAnagram(s="anagram", t="nagaram") == True
assert isAnagram(s="rat", t="car") == False