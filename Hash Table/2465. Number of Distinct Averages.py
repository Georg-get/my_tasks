### Условие задачи:
# Вам дан целочисленный массив четной длины с индексом 0 .nums
# Пока nums не пусто, необходимо повторно:
# Найдите минимальное число nums и удалите его.
# Найдите максимальное число nums и удалите его.
# Вычислите среднее арифметическое двух удаленных чисел.
# Среднее двух чисел a и b составляет (a + b) / 2.
# Например, среднее значение 2и 3составляет (2 + 3) / 2 = 2.5.
# Возвращает количество различных средних значений, рассчитанных с использованием описанного выше процесса.
# Обратите внимание, что при равенстве минимального или максимального числа любое из них можно удалить.

# Example 1:
# Input: nums = [4,1,4,0,3,5]
# Output: 2
# Explanation:
# 1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].
# 2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].
# 3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.
# Since there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.

# Example 2:
# Input: nums = [1,100]
# Output: 1
# Explanation:
# There is only one average to be calculated after removing 1 and 100, so we return 1.

### Краткое условие:
# Надо взять самое большое число из массива nums и вычисть его из самого малеького числа в массиве nums затем разделить
# и удалить эти два числа из массива и затем вывести колличестово этих числел.

###                                 Хзш сет + два указателя
# Алгоритм решение задачи:
# 0) Сортируем массив nums по возрастанию.
# 0.1) Создаем переменую i со значенме 0 и переменную j со значением длины массива nums -1.
# 0.2) Создаем пустой массив result.
# 1) Проходимся циклом while i < j,
# 1.1) Добавляем в массив result значение (i+j)/2.
# 1.2) Увеличиваем значение переменной i на 1.
# 1.3) Уменьшаем значение переменной j на 1.
# 2) Вернуть длину словаря сета массива result.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

nums = [4, 1, 4, 0, 3, 5]

def distinctAverages(nums):
    nums.sort()  # [0, 1, 3, 4, 4, 5]
    left = 0
    right = len(nums) - 1
    result = []

    while left < right:
        #               (0     +    5)    /2 = 2.5
        result.append((nums[left] + nums[right]) / 2)  # [ 2.5 ]
        left += 1
        right -= 1
    # [2.5, 2.5, 3.5]
    return len(set(result))  # 2

distinctAverages(nums)

assert distinctAverages(nums=[4, 1, 4, 0, 3, 5]) == 2
assert distinctAverages(nums=[1, 100]) == 1