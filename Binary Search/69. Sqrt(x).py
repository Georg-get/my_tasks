### Условие задачи:
# Учитывая неотрицательное целое число x, верните квадратный корень из x округленного до ближайшего целого числа.
# Возвращаемое целое число также должно быть неотрицательным.
# Вы не должны использовать какие-либо встроенные функции или операторы экспоненты.
# Например, не используйте pow(x, 0.5)в C++ или x ** 0.5Python.

# Example 1:
# Input: x = 4
# Output: 2
# Explanation: The square root of 4 is 2, so we return 2.

# Example 2:
# Input: x = 8
# Output: 2
# Explanation: The square root of 8 is 2.82842..., and since we round it down to t

### Краткое условие:
# Необходимо вернуть целую часть квадратного корня из x, округленную вниз.

# Краткое объяснение решение задачи:
# 1. Инициализация: Устанавливаются границы поиска — left (1) и right (x).
# 2. Цикл поиска: Пока left меньше или равен right:
#    - Вычисляется среднее значение mid.
#    - Если mid является квадратным корнем (то есть, mid * mid равно x), возвращается mid.
#    - Если mid больше квадратного корня (то есть, mid * mid больше x), сужается верхняя граница (right).
#    - Если mid меньше квадратного корня, сужается нижняя граница (left).
# 3. Возврат результата: Если не найден точный квадратный корень, возвращается значение right, которое будет целой частью квадратного корня.

# Полное объяснение решение задачи:
# 0) Создаем границы бинарного поиска, где начало начинается с 1 а конец с x.
# 1) Проходимся циклом ваилд пока left не станет меньше или равно right,
# 1.1) Создаем переменную mid для поиска середины.
# 1.2) Если mid равен x деленное на mid, то верни mid.
# 1.3) Если mid больше x деленого на mid, то двигаем правую гланицу на mid - 1.
# 1.4) Иначе двигаем левую границу на mid + 1.
# 2) Вернуть переменную right

# Сложность:
# 1) Время O(log(x))
# 2) Память O(1)

x = 4

def mySqrt(x):
    left = 1
    right = x # 4

    while left <= right:
        mid = left + (right - left) // 2

        if mid == x // mid:
            #       2 это два из первого кейса
            return mid
        elif mid > x // mid:
            right = mid - 1
        else:
            left = mid + 1
    #       2 это два из второго кейса
    return right

mySqrt(x)

assert mySqrt(x=4) == 2
assert mySqrt(x=8) == 2
# Доп юнитесты для проверки некоторых условий:
assert mySqrt(x=0) == 0 # Тест с нулем
assert mySqrt(x=1) == 1 # Тест с единицей
assert mySqrt(x = 2147395600) == 46340 # Тест с большими значениями
assert mySqrt(x = 15) == 3 # Тест с неидеальными квадратами