### Условие задачи:
# Вы являетесь менеджером по продукту и в настоящее время возглавляете команду по разработке нового продукта.
# К сожалению, последняя версия вашего продукта не прошла проверку качества.
# Поскольку каждая версия разрабатывается на основе предыдущей, все версии после плохой версии также являются плохими.
# Предположим, у вас есть n версии [1, 2, ..., n] и вы хотите найти первую плохую,
# из-за которой все последующие будут плохими.
# Вам предоставляется API bool isBadVersion(version), который возвращает, является ли version это плохим.
# Реализуйте функцию для поиска первой плохой версии. Вам следует минимизировать количество вызовов API.

# Example 1:
# Input: n = 5, bad = 4
# Output: 4
# Explanation:
# call isBadVersion(3) -> false
# call isBadVersion(5) -> true
# call isBadVersion(4) -> true
# Then 4 is the first bad version.

# Example 2:
# Input: n = 1, bad = 1
# Output: 1

### Краткое условие:
# Надо опросить api и найти плохую версию кода.

# Краткое объяснение решение задачи:
# 1. Устанавливаются границы поиска (left и right) и переменная result для хранения результата.
# 2. Проходимся циклом пока левый и правый указатель не пересекутся, вычисляется середина (mid).
# 3. Проверка: Если версия mid плохая (isBadVersion(mid) возвращает true), то:
#    - Сужаем правую границу (right = mid) и обновляем result.
#    - Иначе, сужаем левую границу (left = mid + 1).
# 4. После завершения цикла возвращается первая плохая версия, хранящаяся в result.

# Полное объяснение решение задачи:
# 0) Найти бинарном поиском посиком плохую версию
# 1) Вернуть result

# Сложность:
# 1) времени O(log n)
# 2) памяти O(1)

n = 5

def firstBadVersion(n):
    left = 1
    right = n  # 5
    result = n

    while (left < right):
        mid = left + (right - left) // 2

        if isBadVersion(mid):
            right = mid
            result = mid
        else:
            left = mid + 1
    #       4
    return result

firstBadVersion(n)

assert firstBadVersion(n=5) == 4
assert firstBadVersion(n=1) == 1
# Доп юнитесты для проверки некоторых условий:
# assert firstBadVersion(n=100) == 57