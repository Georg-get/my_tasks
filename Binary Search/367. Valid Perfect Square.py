### Условие задачи:
# Учитывая положительное целое число, верните true if num — полный квадрат или false иначе.
# Идеальный квадрат — это целое число, которое является квадратом целого числа.
# Другими словами, это произведение некоторого целого числа само на себя.
# Вы не должны использовать какие-либо встроенные библиотечные функции, такие как sqrt.

# Example 1:
# Input: num = 16
# Output: true
# Explanation: We return true because 4 * 4 = 16 and 4 is an integer.

# Example 2:
# Input: num = 14
# Output: false
# Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.

### Краткое условие:
# Необходимо вернуть true, если num является совершенным квадратом
# (т.е. существует целое число, квадрат которого равен num), и false в противном случае.

# Краткое объяснение решение задачи:
# 1. Устанавливает границы поиска (left = 1 и right = num).
# 2. Проходимся циклом пока левый и правый указатели не пересекутся:
#    - Находит среднее значение mid.
#    - Вычисляет квадрат mid.
#    - Если квадрат равен num, возвращает True.
#    - Если квадрат меньше num, сдвигает левую границу вправо.
#    - Если квадрат больше num, сдвигает правую границу влево.
# 3. Если не найдено совпадение, возвращает False.

# Полное объяснение решение задачи:
# 0) Определяем границы бинарного поиска, левая часть равна 1, а правая равна числу num.
# 1) Проходимся циклом ваилд пока left не станет меньше или равно right,
# 1.1) Создаем переменную mid для поиска середины.
# 1.2) Создаем переменную square которая равна mid умножаная на mid.
# 1.3) Если square равен num, то верни True.
# 1.4) Если square меньше num, то двигай левую границу на mid + 1.
# 1.5) Иначе , двигай правую границу на mid - 1.
# 2) Верни False

# Сложность:
# 1) Время O(log n)
# 2) Память O(1)

num = 16

def isPerfectSquare(num):
    left = 1
    right = num  # 16

    while left <= right:
        mid = (left + right) // 2
        square = mid * mid

        if square == num:
            return True
        elif square < num:
            left = mid + 1
        else:
            right = mid - 1

    return False

isPerfectSquare(num)

assert isPerfectSquare(num=16) == True
assert isPerfectSquare(num=14) == False
# Доп юнитесты для проверки некоторых условий:
assert isPerfectSquare(num=1) == True  # Тест на единицу
assert isPerfectSquare(num=100000000) == True  # Большое число, совершенный квадрат
assert isPerfectSquare(num=2147483647) == False  # Тест на максимальное значение
assert isPerfectSquare(num=99999999) == True  # Большое число, несовершенный квадрат