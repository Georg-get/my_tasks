### Условие задачи:
# Для заданной строки, date представляющей дату по григорианскому календарю,
# отформатированную как YYYY-MM-DD, вернуть номер дня в году.

# Example 1:
# Input: date = "2019-01-09"
# Output: 9
# Explanation: Given date is the 9th day of the year in 2019.

# Example 2:
# Input: date = "2019-02-10"
# Output: 41

### Краткое условие:
# Надо отформатированную строку date, как YYYY-MM-DD, вернуть номер дня в году.

# Алгоритм решение задачи:
# 0) Определите словарь для сопоставления месяца с номером дня в невисокосном году.
# 1) Получить год из строки.
# 2) Проверьте условие для високосного года,
# 2.1) Если год високосный и месяц после февраля, прибавьте к результату 1.
# 2.2) В противном случае верните номер дня в соответствии с невисокосным годом.

# Сложность:
# 1) Время O(1)
# 2) Память O(1)

date = "2019-01-09"

def dayOfYear(date):
    # Определите словарь для сопоставления месяца с номером дня в невисокосном году.
    dict = {"01": 0, "02": 31, "03": 59, "04": 90, "05": 120, "06": 151,
              "07": 181, "08": 212, "09": 243, "10": 273, "11": 304, "12": 334}
    # получить год из строки
    year = int(date[:4])

    # Проверьте условие для високосного года
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) and int(date[5:7]) > 2:
        # Если год високосный и месяц после февраля, прибавьте к результату 1.
        return dict[date[5:7]] + int(date[8:]) + 1
    else:
        # В противном случае верните номер дня в соответствии с невисокосным годом.
        return dict[date[5:7]] + int(date[8:])

dayOfYear(date)

assert dayOfYear(date="2019-01-09") == 9
assert dayOfYear(date="2019-02-10") == 41