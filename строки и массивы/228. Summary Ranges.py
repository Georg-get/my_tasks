### Условие задачи:
# Вам дан отсортированный уникальный целочисленный массив nums.
# Диапазон — [a, b] это набор всех целых чисел от a до b(включительно).
# Верните наименьший отсортированный список диапазонов, которые покрывают все числа в массиве ровно.
# То есть каждый элемент из nums покрывается ровно одним из диапазонов, и не существует целого числа x, которое xнаходится в одном из диапазонов, но не в nums.
# Каждый диапазон [a, b] в списке должен быть выведен как:
# "a->b"если a != b
# "a"если a == b

# Example 1:
# Input: nums = [0,1,2,4,5,7]
# Output: ["0->2","4->5","7"]
# Explanation: The ranges are:
# [0,2] --> "0->2"
# [4,5] --> "4->5"
# [7,7] --> "7"

# Example 2:
# Input: nums = [0,2,3,4,6,8,9]
# Output: ["0","2->4","6","8->9"]
# Explanation: The ranges are:
# [0,0] --> "0"
# [2,4] --> "2->4"
# [6,6] --> "6"
# [8,9] --> "8->9"

### Краткое условие:
# Верните наименьший отсортированный список диапазонов, которые покрывают все числа в массиве ровно.

# Алгоритм решение задачи:
# 0) Создаем левый и правый указатель, и пустой массив result.
# 1) Проходимся циклом ваилд пока левый и правыйуказатель не дайдет до конца массив nums,
# 1.1) Если индекс правого указателя +1 меньше длины массива nums и число где установлен правый указатель +1 равно nums[right + 1], увеличиваем right на 1.
# 1.2) Иначе,
# 1.2.1) Если числа где стаят левый и правый указатель равны, то добавь число где стаит левый указатель в массив result, увеличь слевый и правый указатели на 1.
# 1.2.2) Если числа где стаят левый и правый указатель НЕ равны, то добавь число где стаит левый указатель + '->' число где стаит правый указатель в массив result,
# 1.2.2.1) Увеличь right на 1 и сделай left равный right.
# 2) Верни result.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

nums = [0, 1, 2, 4, 5, 7]

def summaryRanges(nums):
    left = 0
    right = 0
    result = []

    while left < len(nums) and right < len(nums):

        if right + 1 < len(nums) and nums[right] + 1 == nums[right + 1]:
            right += 1
        else:

            if nums[left] == nums[right]:
                result.append(str(nums[left]))
                left += 1
                right += 1

            else:
                result.append(str(nums[left]) + '->' + str(nums[right]))
                right += 1
                left = right

    return result

summaryRanges(nums)

assert summaryRanges(nums=[0, 1, 2, 4, 5, 7]) == ["0->2", "4->5", "7"]
assert summaryRanges(nums=[0, 2, 3, 4, 6, 8, 9]) == ["0", "2->4", "6", "8->9"]