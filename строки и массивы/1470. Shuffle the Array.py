### Условие задачи:
# Дан массив, nums состоящий из 2n элементов в виде .[x1,x2,...,xn,y1,y2,...,yn]
# Верните массив в виде .[x1,y1,x2,y2,...,xn,yn]

# Example 1:
# Input: nums = [2,5,1,3,4,7], n = 3
# Output: [2,3,5,4,1,7]
# Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

# Example 2:
# Input: nums = [1,2,3,4,4,3,2,1], n = 4
# Output: [1,4,2,3,3,2,4,1]

# Example 3:
# Input: nums = [1,1,2,2], n = 2
# Output: [1,2,1,2]

### Краткое условие:
# Верните массив в виде .[x1,y1,x2,y2,...,xn,yn]

# Алгоритм решение задачи:
# 0) Ставим левый указатель на элемент под индексом 0 , а правый указатель на элемент под индексом n, и создаем пустой массив result.
# 1) Проходимся циклом ваилд пока left не станет не дойдет до n индекса.
# 1.1) Добавляем в массив result значение которое находится на левом указателе.
# 1.2) Добавляем в массив result значение которое находится на правом указателе.
# 1.3) Увеличь left на 1 и right на 1.
# 2) Верни массив result.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

nums = [2, 5, 1, 3, 4, 7]
n = 3

def shuffle(nums, n):
    left = 0
    right = n
    result = []

    while left < n:
        result.append(nums[left])
        result.append(nums[right])

        left += 1
        right += 1

    return result

shuffle(nums, n)

assert shuffle(nums=[2, 5, 1, 3, 4, 7], n=3) == [2, 3, 5, 4, 1, 7]
assert shuffle(nums=[1, 2, 3, 4, 4, 3, 2, 1], n=4) == [1, 4, 2, 3, 3, 2, 4, 1]
assert shuffle(nums=[1, 1, 2, 2], n=2) == [1, 2, 1, 2]