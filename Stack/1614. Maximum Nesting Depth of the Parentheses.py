### Условие задачи:
# Строка является допустимой строкой в круглых скобках (обозначается VPS),
# если она соответствует одному из следующих условий:
# Это пустая строка ""или один символ, не равный "("или ")",
# Его можно записать как AB (A объединить с B), где A и B — VPS, или
# Это можно записать так (A): где A находится VPS.
# Мы можем аналогичным образом определить глубину вложенности depth(S) любого VPS S следующим образом:
# depth("") = 0
# depth(C) = 0, где C — строка с одним символом, отличным от "("или ")".
# depth(A + B) = max(depth(A), depth(B)), где A и B находятся VPS .
# depth("(" + A + ")") = 1 + depth(A), где A находится VPS .
# Например, "", "()()", и "()(()())"являются VPS (с глубиной вложенности 0, 1 и 2), а ")("и "(()"не являются VPS .
# Учитывая VPS, представленный в виде строки s, верните глубину вложенности s.

# Example 1:
# Input: s = "(1+(2*3)+((8)/4))+1"
# Output: 3

# Example 2:
# Input: s = "(1)+((2))+(((3)))"
# Output: 3

### Краткое условие:
# Проверить строку на максимальную вложенность.

# Алгоритм решение задачи:
# 0) Создать пустой массив stack и переменную result в которой будет хранить максимальную вложенность.
# 1) пройтись по элементам строки
# 1.1) если символ строки являеться открываюшейся скобкой "(", то добавить в стек,
# проверить длина текушего стека больше чем значение переменой result.
# 1.1.1) если да, от обновить значение переменной result
# 1.1.2) если нет, от НЕ обновить значение переменной result
# 1.2) если символ строки являеться закрываюшейся скобкой ")", то удалить последний элемент из стека.
# 2) вернуть result, которое и является максимальной вложенностью скобок в строке s.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

s = "(1)+((2))+(((3)))"

def maxDepth(s):
    stack = []
    result = 0

    for i in s:
        if i == "(":
            stack.append(i)
            result = max(result, len(stack))

        elif i == ")":
            stack.pop()
    # []
    return result  # 3

maxDepth(s)

assert maxDepth(s="(1+(2*3)+((8)/4))+1") == 3
assert maxDepth(s="(1)+((2))+(((3)))") == 3