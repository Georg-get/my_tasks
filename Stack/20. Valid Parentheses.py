### Условие задачи:
# Учитывая строку s, содержащую только символы '(', ')', '{', и '}', определите,
# является ли входная строка допустимой.'['']'
# Входная строка действительна, если:
# 1) Открытые скобки должны закрываться скобками того же типа.
# 2) Открытые скобки должны закрываться в правильном порядке.
# 3) Каждой закрывающей скобке соответствует открытая скобка того же типа.

# Example 1:
# Input: s = "()"
# Output: true

# Example 2:
# Input: s = "()[]{}"
# Output: true

# Example 3:
# Input: s = "(]"
# Output: false

# Example 4:
# Input: s = "([])"
# Output: true

### Краткое условие:
# Если строка s корректна, то вернуть true. Иначе false.
# Строка корректна если открывающие скобки закрываются соответствующими и нет скобки без пары.

# Краткое объяснение решение задачи:
# 1. Если длина строки нечётная, возвращает False, так как не может быть валидной.
# 2. Создаем словарь для сопоставления открывающих и закрывающих скобок.
# 3. Итерация по строке:
#    - Если символ — открывающая скобка, добавляет его в стек.
#    - Если символ — закрывающая скобка:
#      - Проверяет, пуст ли стек. Если пуст, возвращает False.
#      - Извлекает последнюю открытую скобку из стека и проверяет, соответствует ли она закрывающей.
# 5. Если стек пуст в конце, возвращает True (строка валидна); иначе — False.

# Полное объяснение решение задачи:
# 0) Создать пустой массив (stack)
# 1) Вставляем в массив открываюшиеся скобки
# 2) Вставляем в массив закрывающеся скобки
# 2.1) смотрим в стек, что там ?
# 2.1.1) если открывающая скобка совподает с закрывающейся , то удаяем .pop()
# 2.1.2) если открывающая скобка и закрывающейся скобка не совпадают, то вернуть return false
# 3) Если длина массива stack равна 0, то return True.
# 4) Если длина массива stack НЕ равна 0, то return False.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

s = '()()'

def isValid(s):
    stack = []
    dict = {"(": ")", "[": "]", "{": "}"}

    for i in s:
        if i in dict.keys():
            stack.append(i)

        elif len(stack) == 0 or dict[stack.pop()] != i:
            return False

    if len(stack) == 0:
        return True
    else:
        return False
    # return len(stack) == 0

isValid(s)

assert isValid(s="()") == True
assert isValid(s="()[]{}") == True
assert isValid(s="(]") == False
assert isValid(s="([])") == True
assert isValid(s="()()") == True
# Доп юнитесты для проверки некоторых условий:
assert isValid(s="") == True  # Проверка на пустую строку
assert isValid(s="{[(])}") == False  # Тест с разными типами скобок
assert isValid(s="(())(") == False  # Тест с неправильными вложениями