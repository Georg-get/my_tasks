### Условие задачи:
# Дан массив целых чисел nums, отсортированный в неубывающем порядке,
# вернуть массив квадратов каждого числа, отсортированный в неубывающем порядке.

# Example 1:
# Input: nums = [-4,-1,0,3,10]
# Output: [0,1,9,16,100]
# Explanation: After squaring, the array becomes [16,1,0,9,100].
# After sorting, it becomes [0,1,9,16,100].

# Example 2:
# Input: nums = [-7,-3,2,3,11]
# Output: [4,9,9,49,121]

### Краткое условие:
# Надо вернуть массив чисел возведенных в квадрат из массива nums.

# Алгоритм решение задачи:
# 0) Создаем переменные left со значением 0 и right со значением длины строки s-1, и пустой массив result.
# 1) Проходимся циклом ваилд пока left не станет меньше или равно чем right,
# 1.1) Если число на котором стоит левый указатель возведенное в квадрат больше чем исло на котором стоит правый указатель возведенное в квадрат из массива nums,
# 1.1.1) То добавь в массива result значение числа (в квадрате) где установлен левый указатель и увеличь значение переменной left на 1.
# 1.2) Если число на котором стоит левый указатель возведенное в квадрат НЕ больше чем исло на котором стоит правый указатель возведенное в квадрат из массива nums,
# 1.2.1) То добавь в массива result значение числа (в квадрате) где установлен правый указатель и уменьши значение переменной right на 1.
# 2) Верни отсортированый массива result по возрастанию.

# Сложность:
# 1) Время O(n)
# 2) Память O(n)

nums = [-4, -1, 0, 3, 10]

def sortedSquares(nums):
    left = 0
    right = len(nums) - 1
    result = []

    while left <= right:

        if nums[left] ** 2 > nums[right] ** 2:
            result.append(nums[left] ** 2)
            left += 1
        else:
            result.append(nums[right] ** 2)
            right -= 1
    # [100, 16, 9, 1, 0]
    return sorted(result)  # [0,1,9,16,100]

sortedSquares(nums)

assert sortedSquares(nums=[-4, -1, 0, 3, 10]) == [0, 1, 9, 16, 100]
assert sortedSquares(nums=[-7, -3, 2, 3, 11]) == [4, 9, 9, 49, 121]