### Условие задачи:
# Учитывая две строки и s, t верните true if s является подпоследовательностью t, или false в противном случае.
# Подпоследовательность строки — это новая строка , которая формируется из исходной строки путем удаления некоторых (может быть ни одного)
# символов без нарушения относительного положения остальных символов. (т. е. "ace"является подпоследовательностью while is not)."abcde""aec"

# Example 1:
# Input: s = "abc", t = "ahbgdc"
# Output: true

# Example 2:
# Input: s = "axc", t = "ahbgdc"
# Output: false

### Краткое условие:
# Необходимо вернуть true, если строка s является подпоследовательностью строки t, и false в противном случае.

# Краткое объяснение решение задачи:
# 1. Инициализация указатели. Левый указатель ставим в начало строки s, а правый в начало строки t.
# 2. Проходит по обеим строкам.
# Если символы совпадают (s[left] == t[right]), указатель left увеличивается, чтобы проверить следующий символ в s.
# Указатель right всегда увеличивается, чтобы пройти по t.
# 3. Проверка завершения: Если left достигает конца строки s, это означает,
# что все символы из s были найдены в t в правильном порядке,
# и то возвращаем True. В противном случае возвращает False.

# Полное объяснение решение задачи:
# 0) Устанавливаем левый указатель на начало строки s и правый указатель на начало строки t.
# 1) Проходимся циклом ваил пока left не станет больше длины строки s и right не станет больше длины строки t,
# 1.1) Если буква на котором установлен левый указатель из строки s равна буква на котором установлен правый указатель из строки t,
# 1.1.1) Увеличеваем левый и правый указатели на 1.
# 1.2) Увеличеваем правый указатель на 1
# 2) Если левый указатель дошел до конца строки s, то верни True.
# 3) Иначе, верни False.

# Сложность:
# 1) Время O(m)
# 2) Память O(1)

s = "abc"
t = "ahbgdc"

def isSubsequence(s, t):
    left = 0
    right = 0

    while left < len(s) and right < len(t):  # пока каждый указатель не дойдет до конца строк
        if s[left] == t[right]:
            left += 1
            right += 1
        else:
            right += 1
    #   3       3
    if left == len(s):  # это условие защищает от 3 юнитеста !!!r
        return True
    else:
        return False
    # return left == len(s)

isSubsequence(s, t)

assert isSubsequence(s="abc", t="ahbgdc") == True
assert isSubsequence(s="axc", t="ahbgdc") == False
assert isSubsequence(s="", t="ahbgdc") == True # от этого теста
# Доп юнитесты для проверки некоторых условий:
assert isSubsequence(s="a", t="a") == True  # Случаи с одинаковыми строками
assert isSubsequence(s="", t="") == True  # Пустые строки
assert isSubsequence(s="adc", t="") == False  # Одна строка пустая